component provides App requires io.Output out, data.IntUtil iu, database.MongoDB, data.json.JSONParser parser, database.BSON bsonSerialiser, database.UUID uuid, time.Timer time, database.ByteUtil bu, data.StringUtil su {

	String[] remove(int indexes[], String elements[]){

		if(indexes.arrayLength < 1 || elements.arrayLength < 1)
			throw new Exception("Invalid input: Your arrays must contain 1 or more elements");

		out.println("Number of elements: $(iu.intToString(elements.arrayLength - indexes.arrayLength)) old $(iu.intToString(elements.arrayLength))");

		String newElements[] = new String[elements.arrayLength - indexes.arrayLength];

		out.println("New Elements: $(iu.intToString(newElements.arrayLength))");

		int newElementsCount = 0;

		for(int elementCount = 0; elementCount < elements.arrayLength; elementCount++){
			bool toBeRemoved = false;

			for(int indexCount = 0; indexCount < indexes.arrayLength; indexCount++){
				if(indexes[indexCount] == elementCount){
					toBeRemoved = true;
					break;
				}
			}

			if(toBeRemoved == false){
				out.println("Before: $(iu.intToString(newElementsCount)) $(iu.intToString(elementCount)) $(elements[elementCount].string)");
				newElements[newElementsCount] = elements[elementCount];
				newElementsCount++;
				out.println("After: $(iu.intToString(newElementsCount)) $(iu.intToString(elementCount))");
			}
		}

		return newElements;
	}


	JSONElement getValueByDot(String tokens[], JSONElement tree){

		for(int i = 0; i < tokens.arrayLength; i++)
			out.println(tokens[i].string);

		/*if(tokens.arrayLength == 1)
			if(tree.name == tokens[0].string)
				return tree;
			else
				throw new Exception("Exception: item not found.\n\n $(tree.name) != $(tokens[0].string)");*/

		char currentToken[] = tokens[0].string;

		JSONElement result;

		if(tree.type == JSON_ELEMENT_OBJECT){

			int open;
			int close;
			int index;

			//check if the user is giving us an arrayName with an index.
			if((open = su.find(currentToken,"[")) > 0 && ((close = su.find(currentToken,"]"))  > 0)){
				//we extract the index for the array

				out.println(su.subString(currentToken, open + 1, close - open - 1));
				index = iu.intFromString(su.subString(currentToken, open + 1, close - open - 1));
				currentToken = su.subString(currentToken,0,open);
			}

			for(int i = 0; i < tree.children.arrayLength; i++)
				if(tree.children[i].name == currentToken){

					String newTokens[] = remove(new int[](0),tokens);

					/*this is the case where we are not indexing an array
					if(open == 0){



					}else{



						//recursively call the function, by getting the array, and then fetching the desired child item.

					}*/

					out.println("open $(iu.intToString(open)) closed $(iu.intToString(close)) index $(iu.intToString(index)) arrayLength $(iu.intToString(newTokens.arrayLength))");

					if(newTokens.arrayLength > 1 && open == 0)
						result = getValueByDot(newTokens, tree.children[i]);
					else if(newTokens.arrayLength > 1 && open > 0)
						result = getValueByDot(newTokens, tree.children[i].children[index]);
					else if(newTokens.arrayLength == 1 && open == 0)
						result = tree.children[i];
					else if(newTokens.arrayLength == 1 && open > 0)
						result = tree.children[i].children[index];
					else
						throw new Exception("Exception: item not found.\n\n $(tree.name) != $(tokens[0].string)");
				}
		}else{
			throw new Exception("Exception: item not found.");
		}

		if(result == null){
			out.println(currentToken);
		}

		return result;
	}

	JSONElement getValueWrapper(char dotNotation[], JSONElement tree){
		return getValueByDot(su.explode(dotNotation,"."), tree);
	}

	char[] toString(JSONElement element, int depth){

		char content[] = "\n";

		char printDepth[] = "";

		for(int i = 0; i < depth; i++)
		 	printDepth = new char[](printDepth, "\t");

		if(element.type == JSON_ELEMENT_OBJECT){

			if(element.name.arrayLength > 0)
				content = new char[](content,printDepth, element.name, " : ", "{");
			else
				content = new char[](content,printDepth, "{");

			for(int i = 0; i < element.children.arrayLength; i++)
				content = new char[](content, toString(element.children[i], depth + 1));

			content = new char[](content,printDepth,"}");
		}

		if(element.type == JSON_ELEMENT_STRING)
			content = new char[](content, printDepth, element.name, " : ", "\"", element.value,"\"");

		if(element.type == JSON_ELEMENT_NUMBER || element.type == JSON_ELEMENT_BOOLEAN)
			content = new char[](content, printDepth, element.name, " : ", element.value);

		if(element.type == JSON_ELEMENT_ARRAY){

			if(element.name.arrayLength > 0)
				content = new char[](content, printDepth, element.name, " : ", "[");
			else
				content = new char[](content, printDepth, "[");


			for(int i = 0; i < element.children.arrayLength; i++)
				content = new char[](content, toString(element.children[i], depth + 1));

			content = new char[](content, printDepth,"]");
		}

		content = new char[](content,"\n");

		return content;
	}

	JSONElement getByName(JSONElement element, char name[]){

		if(element.name == name)
			return element;

		if(element.type == JSON_ELEMENT_OBJECT || element.type == JSON_ELEMENT_ARRAY){

			JSONElement found;

			for(int i = 0; i < element.children.arrayLength; i++)
				if((found = getByName(element.children[i],name)) != null)
					return found;
		}

		return null;
	}

	int App:main(AppParam params[]) {

		/*out.println("$(uuid.generate())");

		out.println(bu.toHexString(new byte[](255,0,128)));

		byte bytes[] = bu.fromHexString(bu.toHexString(new byte[](255,0,128)));

		for(int i = 0; i < bytes.arrayLength; i++)
			out.println(iu.intToString(bytes[i]));*/



    JSONElement element = parser.parseDocument("{\"test\":33, \"works\":\"true\", \"arrayTest\":[{\"innerObjectTest\":43},[{\"innerObject2\":{\"array2\":[\"a\"]}}]]}");

		out.println(toString(getValueWrapper("arrayTest[1].innerObject2.array2[0]",element),0));

    /*MongoDB mongo = new MongoDB("127.0.0.1",27017);

    JSONElement elements[] = element;

    //JSONElement find = parser.parseDocument("{\"test\":33, \"arrayTest\":[{\"innerObjectTest\":43}]}");


		mongo.insert("danasds.testing", elements);

		JSONElement find = parser.parseDocument("{\"test\": 33}");
		JSONElement update = parser.parseDocument("{\"test\": 44}");

		//JSONElement find = parser.parseDocument("{\"hello\": \"world\"}");

		mongo.update("danasds.testing",find, update);

    JSONElement results[] = mongo.find("danasds.testing",find,2);

		JSONElement _id;

		for(int i = 0; i < results.arrayLength; i++){
			out.println(toString(results[i], 0));

		 	_id = parser.getValue(results[i],"_id");

		}

		JSONElement find2 = parser.parseDocument(new char[]("{\"_id\":\"",_id.value,"\"}"));

		JSONElement results2[] = mongo.find("danasds.testing",find2,0);

		for(int i = 0; i < results2.arrayLength; i++){
			out.println(toString(results2[i], 0));
		}

		/*while(true){
			time.sleep(100);
		}*/


		return 0;
	}
}
