component provides App requires io.Output out, data.IntUtil iu, database.MongoDB, data.json.JSONParser parser, database.BSON bsonSerialiser, database.UUID uuid, time.Timer time, database.ByteUtil bu{

	void printJSON(JSONElement element, int depth){

		char printDepth[] = "";

		for(int i = 0; i < depth; i++)
		 	printDepth = new char[](printDepth, "\t");

		if(element.type == JSON_ELEMENT_OBJECT){

			if(element.name.arrayLength > 0)
				out.println(new char[](printDepth, element.name, " : ", "{"));
			else
				out.println(new char[](printDepth, "{"));

			for(int i = 0; i < element.children.arrayLength; i++)
				printJSON(element.children[i], depth + 1);

			out.println(new char[](printDepth,"}"));
		}

		if(element.type == JSON_ELEMENT_STRING)
			out.println(new char[](printDepth, element.name, " : ", "\"", element.value,"\""));

		if(element.type == JSON_ELEMENT_NUMBER || element.type == JSON_ELEMENT_BOOLEAN)
			out.println(new char[](printDepth, element.name, " : ", element.value));

		if(element.type == JSON_ELEMENT_ARRAY){

			if(element.name.arrayLength > 0)
				out.println(new char[](printDepth, element.name, " : ", "["));
			else
				out.println(new char[](printDepth, "["));

			for(int i = 0; i < element.children.arrayLength; i++)
				printJSON(element.children[i], depth + 1);

			out.println(new char[](printDepth,"]"));
		}
	}

	int App:main(AppParam params[]) {

		out.println("$(uuid.generate(32))");

		/*int test = 2000;

		byte bytes[] = dana.getByteArrayOf(test);

		for(int j = 0; j < bytes.arrayLength; j++){
      char charValue = bytes[j];
      int intValue = bytes[j];
      out.println("REC $(iu.intToString(j+1))  \"$(charValue), $(iu.intToString(intValue))\"");
    }

		int result = bu.toInteger(bytes);

		byte resultBytes[] = dana.getByteArrayOf(result);

		for(int j = 0; j < resultBytes.arrayLength; j++){
      char charValue = resultBytes[j];
      int intValue = resultBytes[j];
      out.println("REC $(iu.intToString(j+1))  \"$(charValue), $(iu.intToString(intValue))\"");
    }

		out.println("$(iu.intToString(result)) || $(iu.intToString(bytes.arrayLength))");*/



    JSONElement element = parser.parseDocument("{\"test\":33, \"works\":\"true\", \"arrayTest\":[{\"innerObjectTest\":43}]}");

    MongoDB mongo = new MongoDB("127.0.0.1",27017);

    JSONElement elements[] = element;

    //JSONElement find = parser.parseDocument("{\"test\":33, \"arrayTest\":[{\"innerObjectTest\":43}]}");


		mongo.insert("danasds.testing", elements);

		JSONElement find = parser.parseDocument("{\"test\": 33}");
		JSONElement update = parser.parseDocument("{\"test\": 44}");

		//JSONElement find = parser.parseDocument("{\"hello\": \"world\"}");

		mongo.update("danasds.testing",find, update);
		/*
    JSONElement results[] = mongo.find("danasds.testing",find,2);

		for(int i = 0; i < results.arrayLength; i++){
			printJSON(results[i], 0);
		}

		*/

		/*while(true){
			time.sleep(100);
		}*/


		return 0;
	}
}
