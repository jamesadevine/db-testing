const char BSON_DOUBLE = 0x01;            //|  e_name double	64-bit binary floating point
const char BSON_UTF8 = 0x02;              //|  e_name string	UTF-8 string
const char BSON_EMBEDDED_DOCUMENT = 0x03; //|  e_name document	Embedded document
const char BSON_ARRAY = 0x04;             //|	 e_name document	Array
const char BSON_BINARY = 0x05;            //|	 e_name binary	Binary data
const char BSON_UNDEFINED = 0x06;         //|	 e_name	Undefined (value) — Deprecated
const char BSON_OBJECT_ID = 0x07;         //|	 e_name (byte*12)	ObjectId
const char BSON_BOOL = 0x08;              //|	 e_name "\x00"	Boolean "false //|	"\x08" e_name "\x01"	Boolean "true"
const char BSON_DATE_TIME = 0x09;         //|	 e_name int64	UTC datetime
const char BSON_NULL = 0x0A;              //|	 e_name	Null value
const char BSON_REGEX = 0x0B;             //|	 e_name cstring cstring	Regular expression - The first cstring is the regex pattern, the second is the regex options string. Options are identified by characters, which must be stored in alphabetical order. Valid options are 'i' for case insensitive matching, 'm' for multiline matching, 'x' for verbose mode, 'l' to make \w, \W, etc. locale dependent, 's' for dotall mode ('.' matches everything), and 'u' to make \w, \W, etc. match unicode.
const char BSON_STRING = 0x0C;            //|	 e_name string (byte*12)	DBPointer — Deprecated
const char BSON_INT_32 = 0x10;            //|	 e_name int32	32-bit integer
const char BSON_INT_64_TIMESTAMP = 0x11;  //|  e_name int64	Timestamp
const char BSON_INT_64 = 0x12;            //|	 e_name int64	64-bit integer

const char BSON_BOOL_FALSE = 0x00;
const char BSON_BOOL_TRUE = 0x01;
const char BSON_NULL_TERMINATOR = 0x00;

uses data.json.JSONParser;

data BSONDocument{
  copy byte value[];
}

interface BSON {
  BSONDocument serialise(JSONElement json);
  JSONElement deserialise(BSONDocument bson);
}
