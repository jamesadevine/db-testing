
const int32 OP_REPLY = 1;             //returned by the database
const int32 OP_MSG = 1000;            // generic msg command
const int32 OP_UPDATE = 2001;         // update document
const int32 OP_INSERT = 2002;         // insert new document
const int32 OP_QUERY = 2004;          // query a collection
const int32 OP_GET_MORE = 2005;       // get more data from a query
const int32 OP_DELETE = 2006;         // delete documents
const int32 OP_KILL_CURSORS = 2007;   // tell db we are finished with a cursor.

const int32 MONGO_HEADER_SIZE = 16;   //16 bytes

const int32 MONGO_MAX_RAND = 65535;

const int32 MONGO_TIMEOUT_VALUE = 1000;

uses database.BSON;

data MongoHeader{
  int32   messageLength; // total message size, including this
  int32   requestID;     // identifier for this message
  int32   responseTo;    // requestID from the original request (used in reponses from db)
  int32   opCode;        // request type - see table below
}

/*
  fullCollectionName
  The full collection name. The full collection name is the concatenation of the database name with the collection name, using a . for the concatenation. For example, for the database foo and the collection bar, the full collection name is foo.bar.

  Flags
  bit num	name	description
  0	Upsert	If set, the database will insert the supplied object into the collection if no matching document is found.
  1	MultiUpdate	If set, the database will update all matching objects in the collection. Otherwise only updates first matching doc.
  2-31	Reserved	Must be set to 0.

  selector
  BSON document that specifies the query for selection of the document to update.

  update
  BSON document that specifies the update to be performed. For information on specifying updates see the Update Operations documentation from the MongoDB Manual.

  There is no response to an OP_UPDATE message.
*/
data MongoUpdate{
    int32     ZERO;               // 0 - reserved for future use
    char   fullCollectionName[]; // "dbname.collectionname"
    int32     flags;              // bit vector. see below
    BSONDocument  selector;           // the query to select the document
    BSONDocument  update;             // specification of the update to perform
}

/*
  fullCollectionName
  The full collection name. The full collection name is the concatenation of the database name with the collection name, using a . for the concatenation. For example, for the database foo and the collection bar, the full collection name is foo.bar.

  documents
  One or more documents to insert into the collection. If there are more than one, they are written to the socket in sequence, one after another.

  Flags
  bit num	name	description
  0	ContinueOnError	If set, the database will not stop processing a bulk insert if one fails (eg due to duplicate IDs). This makes bulk insert behave similarly to a series of single inserts, except lastError will be set if any insert fails, not just the last one. If multiple errors occur, only the most recent will be reported by getLastError. (new in 1.9.1)
  1-31	Reserved	Must be set to 0.

  There is no response to an OP_INSERT message.
*/
data MongoInsert{
    int32     flags;              // bit vector - see below
    char   fullCollectionName[]; // "dbname.collectionname"
    BSONDocument document;          // one or more documents to insert into the collection
}

/*
  bit num	name	description
  0	Reserved	Must be set to 0.
  1	TailableCursor	Tailable means cursor is not closed when the last data is retrieved. Rather, the cursor marks the final object’s position. You can resume using the cursor later, from where it was located, if more data were received. Like any “latent cursor”, the cursor may become invalid at some point (CursorNotFound) – for example if the final object it references were deleted.
  2	SlaveOk	Allow query of replica slave. Normally these return an error except for namespace “local”.
  3	OplogReplay	Internal replication use only - driver should not set
  4	NoCursorTimeout	The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use. Set this option to prevent that.
  5	AwaitData	Use with TailableCursor. If we are at the end of the data, block for a while rather than returning no data. After a timeout period, we do return as normal.
  6	Exhaust	Stream the data down full blast in multiple “more” packages, on the assumption that the client will fully read all data queried. Faster when you are pulling a lot of data and know you want to pull it all down. Note: the client is not allowed to not read all the data unless it closes the connection.
  7	Partial	Get partial results from a mongos if some shards are down (instead of throwing an error)
  8-31	Reserved	Must be set to 0.

  fullCollectionName
  The full collection name. The full collection name is the concatenation of the database name with the collection name, using a . for the concatenation. For example, for the database foo and the collection bar, the full collection name is foo.bar.

  numberToSkip
  Sets the number of documents to omit - starting from the first document in the resulting dataset - when returning the result of the query.

  numberToReturn
  Limits the number of documents in the first OP_REPLY message to the query. However, the database will still establish a cursor and return the cursorID to the client if there are more results than numberToReturn. If the client driver offers ‘limit’ functionality (like the SQL LIMIT keyword), then it is up to the client driver to ensure that no more than the specified number of document are returned to the calling application. If numberToReturn is 0, the db will use the default return size. If the number is negative, then the database will return that number and close the cursor. No futher results for that query can be fetched. If numberToReturn is 1 the server will treat it as -1 (closing the cursor automatically).

  query
  BSON document that represents the query. The query will contain one or more elements, all of which must match for a document to be included in the result set. Possible elements include $query, $orderby, $hint, $explain, and $snapshot.

  returnFieldsSelector
  Optional. BSON document that limits the fields in the returned documents. The returnFieldsSelector contains one or more elements, each of which is the name of a field that should be returned, and and the integer value 1. In JSON notation, a returnFieldsSelector to limit to the fields a, b and c would be:

  { a : 1, b : 1, c : 1}

  The database will respond to an OP_QUERY message with an OP_REPLY message.
*/
data MongoQuery{
  int32     flags;                  // bit vector of query options.  See below for details.
  char  fullCollectionName[];    // "dbname.collectionname"
  int32     numberToSkip;           // number of documents to skip
  int32     numberToReturn;         // number of documents to return
                                    //  in the first OP_REPLY batch
  BSONDocument  document;                  // query object.  See below for details.
}

data MongoQueryRF{
  int32     flags;                  // bit vector of query options.  See below for details.
  char  fullCollectionName[];    // "dbname.collectionname"
  int32     numberToSkip;           // number of documents to skip
  int32     numberToReturn;         // number of documents to return
                                    // in the first OP_REPLY batch
  BSONDocument  document;                  // query object.  See below for details.
  BSONDocument  returnFieldsSelector;   // Selector indicating the field
}

/*
  fullCollectionName
  The full collection name. The full collection name is the concatenation of the database name with the collection name, using a . for the concatenation. For example, for the database foo and the collection bar, the full collection name is foo.bar.

  numberToReturn
  Limits the number of documents in the first OP_REPLY message to the query. However, the database will still establish a cursor and return the cursorID to the client if there are more results than numberToReturn. If the client driver offers ‘limit’ functionality (like the SQL LIMIT keyword), then it is up to the client driver to ensure that no more than the specified number of document are returned to the calling application. If numberToReturn is 0, the db will used the default return size.

  cursorID
  Cursor identifier that came in the OP_REPLY. This must be the value that came from the database.

  The database will respond to an OP_GET_MORE message with an OP_REPLY message.
*/
data MongoGetMore{
  int32     ZERO;               // 0 - reserved for future use
  char   fullCollectionName[]; // "dbname.collectionname"
  int32     numberToReturn;     // number of documents to return
  int64     cursorID;           // cursorID from the OP_REPLY
}

/*
  fullCollectionName
  The full collection name. The full collection name is the concatenation of the database name with the collection name, using a . for the concatenation. For example, for the database foo and the collection bar, the full collection name is foo.bar.

  Flags
  bit num	name	description
  0	SingleRemove	If set, the database will remove only the first matching document in the collection. Otherwise all matching documents will be removed.
  1-31	Reserved	Must be set to 0.

  selector
  BSON document that represent the query used to select the documents to be removed. The selector will contain one or more elements, all of which must match for a document to be removed from the collection.

  There is no response to an OP_DELETE message.
*/
data MongoDelete{
  int32     ZERO;               // 0 - reserved for future use
  char   fullCollectionName[]; // "dbname.collectionname"
  int32     flags;              // bit vector - see below for details.
  BSONDocument  document;           // query object.  See below for details.
}

/*
numberOfCursorIDs
The number of cursors that are in the message.

cursorIDs
“Array” of cursor IDs to be closed. If there are more than one, they are written to the socket in sequence, one after another.

If a cursor is read until exhausted (read until OP_QUERY or OP_GET_MORE returns zero for the cursor id), there is no need to kill the cursor.
*/
data MongoKillCursors {
    int32     ZERO;              // 0 - reserved for future use
    int32     numberOfCursorIDs; // number of cursorIDs in message
    int64    cursorIDs[];         // sequence of cursorIDs to close
}

/*
  Could be useful for feedback?
*/
data MongoDiagnosticMessage{
  MongoHeader header;  // standard message header
  char   message[]; // message for the database
}

/*
  bit num	name	description
  0	CursorNotFound	Set when getMore is called but the cursor id is not valid at the server. Returned with zero results.
  1	QueryFailure	Set when query failed. Results consist of one document containing an “$err” field describing the failure.
  2	ShardConfigStale	Drivers should ignore this. Only mongos will ever see this set, in which case, it needs to update config from the server.
  3	AwaitCapable	Set when the server supports the AwaitData Query option. If it doesn’t, a client should sleep a little between getMore’s of a Tailable cursor. Mongod version 1.6 supports AwaitData and thus always sets AwaitCapable.
  4-31	Reserved	Ignore

  cursorID
  The cursorID that this OP_REPLY is a part of. In the event that the result set of the query fits into one OP_REPLY message, cursorID will be 0. This cursorID must be used in any OP_GET_MORE messages used to get more data, and also must be closed by the client when no longer needed via a OP_KILL_CURSORS message.
*/
data MongoReply{
  MongoHeader header;
  int32     responseFlags;  // bit vector - see details below
  int64     cursorID;       // cursor id if client needs to do get more's
  int32     startingFrom;   // where in the cursor this reply is starting
  int32     numberReturned; // number of documents in the reply
  BSONDocument documents[];     // documents
}

interface MongoDB {
	MongoDB(char ip[], int port);
	void insert(char collection[], JSONElement jsonQuery[]);
	JSONElement[] find(char collection[], JSONElement jsonQuery, int32 numberToReturn);
  JSONElement[] findWithModifier(char collection[], JSONElement jsonQuery, JSONElement modifier, int32 numberToReturn);
	void update(char collection[], JSONElement jsonQuery, JSONElement update);
	void delete(char collection[], JSONElement jsonQuery);
}
